name: 'Terraform'

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

#0.14.10
# - name: serviceConnection
#   type: string
# - name: resourceGroupName
#   type: string
# - name: storageAccountName
#   type: string
# - name: stateContainerName
#   type: string
# - name: storageAccountAccessKey
#   type: string
# - name: stateFileName
#   type: string
# - name: workingDirectory
#   type: string
#   default: '$(System.DefaultWorkingDirectory)'
# - name: varFileRelativePath
#   type: string
#   default: 'Variables/$(Release.EnvironmentName).tfvars'
# - name: targetModule
#   type: string
#   default: ''
# - name: overridenVariables
#   type: string
#   default: ''


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # terraform_version: 0.13.0:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : init'
    #   inputs:
    #     command: init
    #     workingDirectory: ${{ parameters.workingDirectory }}
    #     commandOptions: '-reconfigure -backend-config="access_key=${{ parameters.storageAccountAccessKey }}'
    #     backendServiceArm: '${{ parameters.serviceConnection }}'
    #     backendAzureRmResourceGroupName: '${{ parameters.resourceGroupName }}'
    #     backendAzureRmStorageAccountName: '${{ parameters.storageAccountName }}'
    #     backendAzureRmContainerName: ${{ parameters.stateContainerName }}
    #     backendAzureRmKey: ${{ parameters.stateFileName }}

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : plan'
    #   inputs:
    #     command: plan
    #     workingDirectory: '${{ parameters.workingDirectory }}'
    #     ${{ if eq(parameters['targetModule'], '') }}:
    #       commandOptions: '-var-file="${{ parameters.varFileRelativePath }}" -out="plan-$(Release.EnvironmentName).tfplan"'
    #     ${{ else }}:
    #       commandOptions: '-var-file="${{ parameters.varFileRelativePath }}" -out="plan-$(Release.EnvironmentName).tfplan" -target="$${{ parameters.targetModule }}"'
    #     environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
    
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    #   displayName: 'Terraform : validate and apply'
    #   inputs:
    #     command: apply
    #     workingDirectory: '${{ parameters.workingDirectory }}'
    #     commandOptions: 'plan-$(Release.EnvironmentName).tfplan'
    #     environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
